%token IDENTIFIER CONSTANT STRING_LITERAL SIZEOF
%token PTR_OP INC_OP DEC_OP LEFT_OP RIGHT_OP LE_OP GE_OP EQ_OP NE_OP
%token AND_OP OR_OP MUL_ASSIGN DIV_ASSIGN MOD_ASSIGN ADD_ASSIGN
%token SUB_ASSIGN LEFT_ASSIGN RIGHT_ASSIGN AND_ASSIGN
%token XOR_ASSIGN OR_ASSIGN TYPE_NAME

%token TYPEDEF EXTERN STATIC AUTO REGISTER
%token CHAR SHORT INT LONG SIGNED UNSIGNED FLOAT DOUBLE CONST VOLATILE VOID
%token STRUCT UNION ENUM ELLIPSIS

%token CASE DEFAULT IF ELSE SWITCH WHILE DO FOR GOTO CONTINUE BREAK RETURN
%start translation_unit


%token [ ] ( ) . , ; ' " + - * / | % ! & { } = _ : ? \ < > ^ == != <= >=  || 
%token && ++ -- ~ -> <<= >>= &= ^= |= += -= *= %= /= << >>  
%token EPS
%%

primary_expression
: IDENTIFIER
| CONSTANT
| ( expression )
;

postfix_expression
: primary_expression
| postfix_expression [ expression ]
| postfix_expression ( )
| postfix_expression ( argument_expression_list )
| postfix_expression . IDENTIFIER
| postfix_expression ++
| postfix_expression --
;

argument_expression_list
: assignment_expression
| argument_expression_list , assignment_expression
;

unary_expression
: postfix_expression
| ++ unary_expression
| -- unary_expression
| unary_operator cast_expression
;

unary_operator
: &
| *
| +
| -
| ~
| !
;

cast_expression
: unary_expression
| ( type_name ) cast_expression
;

multiplicative_expression
: cast_expression
| multiplicative_expression * cast_expression
| multiplicative_expression / cast_expression
| multiplicative_expression % cast_expression
;

additive_expression
: multiplicative_expression
| additive_expression + multiplicative_expression
| additive_expression - multiplicative_expression
;

shift_expression
: additive_expression
| shift_expression << additive_expression
| shift_expression >> additive_expression
;

relational_expression
: shift_expression
| relational_expression < shift_expression
| relational_expression > shift_expression
| relational_expression <= shift_expression
| relational_expression >= shift_expression
;

equality_expression
: relational_expression
| equality_expression == relational_expression
| equality_expression != relational_expression
;

and_expression
: equality_expression
| and_expression & equality_expression
;

exclusive_or_expression
: and_expression
| exclusive_or_expression ^ and_expression
;

inclusive_or_expression
: exclusive_or_expression
| inclusive_or_expression | exclusive_or_expression
;

logical_and_expression
: inclusive_or_expression
| logical_and_expression && inclusive_or_expression
;

logical_or_expression
: logical_and_expression
| logical_or_expression || logical_and_expression
;

conditional_expression
: logical_or_expression
| logical_or_expression ? expression : conditional_expression
;

assignment_expression
: conditional_expression
| unary_expression assignment_operator assignment_expression
;

assignment_operator
: =
| *=
| /=
| %=
| +=
| -=
| <<=
| >>=
| &=
| ^=
| |=
;

expression
: assignment_expression
| expression , assignment_expression
;

constant_expression
: conditional_expression
;

declaration
: declaration_specifiers ;
| declaration_specifiers init_declarator_list ;
;

declaration_specifiers
: storage_class_specifier
| storage_class_specifier declaration_specifiers
| type_specifier
| type_specifier declaration_specifiers
| type_qualifier
| type_qualifier declaration_specifiers
;

init_declarator_list
: init_declarator
| init_declarator_list , init_declarator
;

init_declarator
: declarator
| declarator = initializer
;

type_specifier
: VOID
| CHAR
| SHORT
| INT
| LONG
| FLOAT
| DOUBLE
| SIGNED
| UNSIGNED
| TYPE_NAME
;

specifier_qualifier_list
: type_specifier specifier_qualifier_list
| type_specifier
;

declarator
: pointer direct_declarator
| direct_declarator
;

direct_declarator
: IDENTIFIER
| ( declarator )
| direct_declarator ( parameter_type_list )
| direct_declarator ( identifier_list )
| direct_declarator ( )
;

parameter_type_list
: parameter_list
| parameter_list , ...
;

parameter_list
: parameter_declaration
| parameter_list , parameter_declaration
;

parameter_declaration
: declaration_specifiers declarator
| declaration_specifiers abstract_declarator
| declaration_specifiers
;

identifier_list
: IDENTIFIER
| identifier_list , IDENTIFIER
;

type_name
: specifier_qualifier_list
| specifier_qualifier_list abstract_declarator
;

abstract_declarator
: direct_abstract_declarator
;

direct_abstract_declarator
: ( abstract_declarator )
| ( parameter_type_list )
| direct_abstract_declarator ( )
| direct_abstract_declarator ( parameter_type_list )
;

initializer
: assignment_expression
| { initializer_list }
| { initializer_list , }
;

initializer_list
: initializer
| initializer_list , initializer
;

statement
: labeled_statement
| compound_statement
| expression_statement
| selection_statement
| iteration_statement
;

labeled_statement
: IDENTIFIER : statement
;

compound_statement
: { }
| { statement_list }
| { declaration_list }
| { declaration_list statement_list }
;

declaration_list
: declaration
| declaration_list declaration
;

statement_list
: statement
| statement_list statement
;

expression_statement
: ;
| expression ;
;

selection_statement
: IF ( expression ) statement
| IF ( expression ) statement ELSE statement
;

iteration_statement
: WHILE ( expression ) statement
| DO statement WHILE ( expression ) ;
| FOR ( expression_statement expression_statement ) statement
| FOR ( expression_statement expression_statement expression ) statement
;

translation_unit
: external_declaration
| translation_unit external_declaration
;

external_declaration
: declaration
;


%%
